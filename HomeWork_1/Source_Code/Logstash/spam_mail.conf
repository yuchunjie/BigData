
input {
  pipe {
    codec => "plain"
#    command => "cat spam/*/*/*.lorien"
    command => "cat /log/spam_lorien.tmp"
    charset => "UTF-8"
  }
}

filter {
  multiline {
    negate => "true"
    what => "previous"
    pattern => "Delivered-To:"
  }
  if "Delivered-To" in [message] {
        grok {    
            match => ["message","Delivered-To:\s(%{DATA:delivered_to})\n"]
        }
        grok {
            match => ["message","Date:\s(%{DATA:date})[+|-][\d]{4}\n"]
        }        
        grok {
            match => ["message","From:\s(%{DATA:from})\n"]
        }
        grok {
            match => ["message","To:\s(%{DATA:to})\n"]
        }
        grok {
            match => ["message","Subject:\s(%{DATA:subject})\n"]
        }
        grok {
            match => ["message","Reply-To:\s(%{DATA:reply_to})\n"]
        }
        grok {
            match => ["message","MIME-Version:\s(%{DATA:mime_version})\n"]
        }
        grok {
            match => ["message","Message-ID:\s(%{DATA:message_id})\n"]
        }
        grok {
            match => ["message","X-Originating-IP: %{DATA:x_originating_ip}\n"]
        }
        grok {
            match => ["message","Content-Type:\s(%{DATA:content_type})\n"]
        }
        grok {
            match => ["message","Content-Length:\s(%{DATA:content_length})\n"]
        }
        grok {
            match => ["message","name=\"(%{DATA:file_name})\""]
        }
        grok {
            match => ["message","Content-Type:\s.*?length=(%{INT:file_length})"]
        }
        grok {
            match => ["message","charset=(%{DATA:charset})(\n|;|\s)"]
        }
        mutate {
            gsub  => [charset , "\"", ""]
        }
        ruby {
            code => '
                event["received"] = event["message"].scan(/Received:\s(.*?[+|-][\d]{4})\n/xmi).flatten    
            '
        }    
        ruby {
            code => '
                event["ip"] = event["message"].scan(/(?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])/xmi).flatten
            '
        }
        ruby {
            code => '
                event["http"] = event["message"].scan(/(http:\/\/.*?)[\s|"|<|>|\n]/xmi).flatten
            '
        }
        grok {
           match => ["message","(?m)\n\n%{GREEDYDATA:content}"]
           remove_field => "message"
        }
    }

}

output{
#  stdout {
#    codec => rubydebug
#    debug => true
#  }
  elasticsearch {
    host => "localhost"
    index => "spam_mail"
    index_type => "6attr"
    protocol => "http"
  }
}
