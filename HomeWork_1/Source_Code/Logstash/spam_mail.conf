
input {
  pipe {
    codec => "plain"
#    command => "cat spam/*/*/*.lorien"
    command => "cat /log/spam_lorien.tmp"
    charset => "UTF-8"
  }
}

filter {
  multiline {
    negate => "true"
    what => "previous"
    pattern => "Delivered-To:"
  }
  grok {
    match => ["message","Delivered-To:\s(%{DATA:delivered_to})\n"]
  }
  ruby {
    code => '
      event["received"] = event["message"].scan(/Received:\s(.*?)\n[A-Z]/xmi).flatten
    '
  }
  grok {
    match => ["message","Date:\s%{DATA:date}\n"]
  }
  grok {
    match => ["message","From:\s(%{DATA:from})\n"]
  }
  grok {
    match => ["message","To:\s(%{DATA:to})\n"]
  }
  grok {
    match => ["message","Subject:\s(%{DATA:subject})\n"]
  }
  grok {
    match => ["message","Reply-To:\s(%{DATA:reply_to})\n"]
  }
  grok {
    match => ["message","MIME-Version:\s(%{DATA:mime_version})\n"]
  }
  grok {
    match => ["message","Message-ID:\s(%{DATA:message_id})\n"]
  }
  grok {
    match => ["message","X-Originating-IP: %{DATA:x_originating_ip}\n"]
  }
  grok {
    match => ["message","Content-Type:\s(%{DATA:content-type})\n"]
  }
  grok {
    match => ["message","Content-Length:\s%{DATA:content-length}\n"]
  }
  grok {
    match => ["message","name=\"%{DATA:name}\""]
  }
  grok {
    match => ["message","(?m)\n\n%{GREEDYDATA:content}"]
    remove_field => "message"
  }

}

output{
#  stdout {
#    codec => rubydebug
#    debug => true
#  }
  elasticsearch {
    host => "localhost"
    index => "spam_mail"
    index_type => "src_ip"
    protocol => "http"
  }
}
